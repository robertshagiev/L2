package main

import (
	"fmt"
)

func test() (x int) {
	defer func() {
		x++
	}()
	x = 1
	return
}

func anotherTest() int {
	var x int
	defer func() {
		x++
	}()
	x = 1
	return x
}

func main() {
	fmt.Println(test())
	fmt.Println(anotherTest())
}

/*
test() возвращает 2: Здесь используется именованное возвращаемое значение x. defer инкрементирует x после того,
как функция вычислила возвращаемое значение, но до фактического возврата значения.
Поэтому изменение x влияет на результат, который возвращается.

anotherTest() возвращает 1: Здесь x не является именованным возвращаемым значением.
Значение x копируется для возврата при выполнении return x, и defer увеличивает x уже после этого копирования.
Изменения в x не влияют на уже скопированное для возврата значение.

-defer добавляет функцию в стек вызовов, который будет исполнен в обратном порядке их добавления, после того как вся функция выполнит своё действие, но перед тем как фактическое значение будет отправлено вызывающей стороне.
-Если функция имеет именованные возвращаемые значения, изменения, внесенные через defer, отразятся на конечном результате.
-В противном случае значение возвращаемое оператором return, копируется до выполнения defer, и последующие изменения в defer не влияют на уже скопированное значение.
*/
